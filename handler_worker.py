from config import BOT_TOKEN
import datetime
from telebot.types import (
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from peewee import IntegrityError, State
from models import UserWorker, UserManager, Task
from telebot import StateMemoryStorage, TeleBot
from states import UserState
from telebot.types import Message
import logging


state_storage = StateMemoryStorage()
bot = TeleBot(BOT_TOKEN, state_storage=state_storage)


logger = logging.getLogger('manager_bot_logger')
logger.setLevel(logging.DEBUG)

info_handler = logging.FileHandler('info.log')
info_handler.setLevel(logging.INFO)

error_handler = logging.FileHandler('errors.log')
error_handler.setLevel(logging.ERROR)

formatter = logging.Formatter(
    '%(asctime)s - %(levelname)s - %(message)s - %(filename)s'
    ' - Line: %(lineno)d', '%H:%M')
info_handler.setFormatter(formatter)
error_handler.setFormatter(formatter)


class InfoFilter(logging.Filter):
    def filter(self, record):
        return record.levelno < logging.ERROR


info_handler.addFilter(InfoFilter())

logger.addHandler(info_handler)
logger.addHandler(error_handler)


def error_handler(func):
    def wrapper(message: Message):
        try:
            return func(message)
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞: {e}')
            bot.reply_to(message, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n '
                                  '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø–æ–º–æ—â—å—é /start.')
    return wrapper


def error_handler_callback(func):
    def wrapper(callback):
        try:
            return func(callback)
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞: {e}')
            bot.send_message(callback.from_user.id,
                             '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.'
                             '\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø–æ–º–æ—â—å—é /start.')
    return wrapper


@bot.message_handler(commands=['start'])
@error_handler
def handle_start(message: Message) -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞. –£–∑–Ω–∞–µ–º —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""

    logger.info(f'–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}')
    bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n'
                                      '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:',
                     reply_markup=gen_buttons_role())

    bot.set_state(message.from_user.id, UserState.choose_role)


@bot.callback_query_handler(
    func=lambda callback: callback.data in ['menu'])
@error_handler_callback
def handler_back_to_manager_menu(callback) -> None:
    """–í–æ–∑—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é"""
    logger.info(f'–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {callback.from_user.id}')
    bot.set_state(callback.from_user.id, UserState.to_do_manager)
    bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id
    )
    handle_manager_to_do(callback.message)


def gen_buttons_role():
    """–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥—è–ª –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏."""
    logger.debug('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏')
    manager = InlineKeyboardButton(
        text='üßë–ú–µ–Ω–µ–¥–∂–µ—Ä ',
        callback_data='manager',
    )
    worker = InlineKeyboardButton(
        text='üßë‚Äçüíª–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
        callback_data='worker',
    )

    keyboard = InlineKeyboardMarkup()
    keyboard.add(manager)
    keyboard.add(worker)
    return keyboard


@bot.callback_query_handler(state=UserState.choose_role,
                            func=lambda callback: callback.data in ['manager'])
@error_handler_callback
def handle_role(callback) -> None:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å - manager. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è"""

    logger.info(f'–í—ã–±–æ—Ä —Ä–æ–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {callback.from_user.id}')
    bot.send_message(callback.from_user.id,
                     '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:',
                     reply_markup=ReplyKeyboardRemove())
    bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id
    )
    bot.set_state(callback.from_user.id, UserState.name_manager)


@bot.message_handler(state=UserState.name_manager)
@error_handler
def handle_data(message: Message) -> None:
    """–£–∑–Ω–∞–ª–∏ –∏–º—è. –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏"""

    logger.info(f'–ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:'
                f' {message.from_user.id}')
    user_id = message.from_user.id
    user_name = message.text

    try:
        user = UserManager.get_or_none(UserManager.user_id == user_id)
        if user is None:
            UserManager.create(
                user_id=user_id,
                user_name=user_name,
                id_task=0
            )
            bot.send_message(
                message.chat.id,
                '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!',
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            bot.reply_to(
                message,
                f'–†–∞–¥ –≤–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å, {user.user_name}!',
                reply_markup=ReplyKeyboardRemove()
            )
        bot.set_state(message.chat.id, UserState.to_do_manager)
        handle_manager_to_do(message)

    except IntegrityError as e:
        print(f'ValueError: {e}')
        bot.reply_to(message,
                     '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞ - '
                     '/start')


@bot.message_handler(state=UserState.to_do_manager)
@error_handler
def handle_manager_to_do(message: Message) -> None:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤—ã–±–∏—Ä–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ"""

    logger.info(f'{message.from_user.id} –ú–µ–Ω–µ–¥–∂–µ—Ä –≤—ã–±–∏—Ä–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ')
    bot.send_message(message.chat.id,
                     '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                     reply_markup=gen_buttons_manager_to_do())


def gen_buttons_manager_to_do():
    """–§—É–Ω–∫—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    new_task = InlineKeyboardButton(
        text='üí°–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–∞–±–æ—Ç—É',
        callback_data='new_task',
    )
    task_list = InlineKeyboardButton(
        text='üìë–°–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç',
        callback_data='task_list_manager',
    )
    report = InlineKeyboardButton(
        text='üìä–°–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç',
        callback_data='report',
    )

    keyboard = InlineKeyboardMarkup()
    keyboard.add(new_task)
    keyboard.add(task_list)
    keyboard.add(report)
    return keyboard


@bot.callback_query_handler(
    func=lambda callback: callback.data in ['new_task', 'end_circle'])
@error_handler_callback
def handler_new_task_name(callback) -> None:
    """–£–∑–Ω–∞–µ–º –∏–º—è –¥–ª—è –∑–∞–¥–∞—á–∏"""

    logger.info(f'–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –∑–∞–¥–∞—á–∏ —É {callback.from_user.id}')
    if callback.data == 'end_circle':
        handle_manager_to_do(callback.message)
    else:
        bot.send_message(callback.from_user.id,
                         '‚úçÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã',
                         )
        bot.set_state(callback.from_user.id, UserState.task_name)
    bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id
    )


@bot.message_handler(state=UserState.task_name)
@error_handler
def handler_info_for_task(message: Message) -> None:
    """–°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –≤ –±/–¥. –£–∑–Ω–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∑–∞–¥–∞—á–∏"""

    logger.info('–°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –≤ –±/–¥. –£–∑–Ω–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∑–∞–¥–∞—á–∏')
    new_task_name = message.text
    manager_id = message.chat.id
    worker = UserWorker.get()
    Task.create(
        task_name=new_task_name,
        id_worker=worker.user_id,
        id_manager=manager_id,
        date_start='',
        date_finish='',
        status='process'
    )
    bot.send_message(message.chat.id,
                     "üìã–î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª/–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ –∑–∞–¥–∞—á–µ:", )
    bot.set_state(message.chat.id, UserState.forward_to_worker)

@bot.message_handler(state=UserState.forward_to_worker,
                     content_types=['photo', 'document', 'text'])
@error_handler
def forward_message_task_to_worker(message: Message) -> None:
    """–ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –µ–≥–æ –≤–æ—Ä–∫–µ—Ä—É"""

    logger.info('–ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –µ–≥–æ –≤–æ—Ä–∫–µ—Ä—É')
    worker = UserWorker.get()
    worker_id = worker.user_id
    if message.content_type == 'document':
        bot.send_document(worker_id, message.document.file_id)
    elif message.content_type == 'photo':
        bot.send_photo(worker_id, message.photo[0].file_id)
    elif message.content_type == 'text':
        bot.send_message(worker_id, message.text)
    else:
        bot.send_message(worker_id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è')
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(
        text='–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ñ–∞–π–ª/–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
        callback_data='send_more',
    ))
    markup.add(InlineKeyboardButton(
        text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é',
        callback_data='send',
    ))
    bot.send_message(message.chat.id,
                     '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ',
                     reply_markup=markup)
    return

@bot.callback_query_handler(
    func=lambda callback: callback.data in ['send', 'send_more'])
@error_handler_callback
def handler_send_or_send_more_to_worker(callback) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É, –ª–∏–±–æ –ø–æ–ª—É—á–∞–µ–º –µ—â—ë —Ñ–∞–π–ª"""

    logger.info('')
    if callback.data == 'send':
        bot.edit_message_reply_markup(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id
        )
        bot.set_state(callback.from_user.id, UserState.info_for_task)
        handle_new_task_send_to_worker(callback.message)
    else:
        bot.send_message(callback.from_user.id,
                         "üìã–î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª/–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ –∑–∞–¥–∞—á–µ:", )
        bot.edit_message_reply_markup(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id
        )
        bot.set_state(callback.from_user.id, UserState.forward_to_worker)



@bot.message_handler(state=UserState.info_for_task)
@error_handler
def handle_new_task_send_to_worker(message: Message) -> None:
    """"""

    logger.info('')

    manager_id = message.from_user.id
    id_manager = Task.id_manager
    status = Task.status
    task = Task.get((id_manager == manager_id) &
                    (status == 'process'))

    manager = UserManager.get(UserManager.user_id == manager_id)
    bot.send_message(task.id_worker,
                     f'üì©–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ "{task.task_name}"\n –æ—Ç: '
                     f' {manager.user_name}!')

@bot.message_handler(state=UserState.info_for_task_1)
@error_handler
def handle_new_task_send_to_worker(message: Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤–æ—Ä–∫–µ—Ä—É"""

    logger.info('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤–æ—Ä–∫–µ—Ä—É')

    manager_id = message.chat.id
    task = Task.get((Task.id_manager == manager_id) &
                    (Task.status == 'process'))
    manager = UserManager.get(UserManager.user_id == manager_id)

    bot.send_message(task.id_worker,
                     f'üì©–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ "{task.task_name}"\n –æ—Ç: '
                     f' {manager.user_name}!')

    bot.send_message(message.chat.id, 'üöÄ–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!')
    handle_accept_question_to_worker(message)
    bot.set_state(message.chat.id, UserState.to_do_manager)
    handle_manager_to_do(message)


@bot.message_handler(state=UserState.fin_task_id)
@error_handler
def handle_accept_question_to_worker(message: Message) -> None:
    """–°–ø—Ä–∞—à–∏–≤–∞–µ–º worker –ø—Ä–∏–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É –∏–ª–∏ –Ω–µ—Ç."""

    logger.info('–°–ø—Ä–∞—à–∏–≤–∞–µ–º worker –ø—Ä–∏–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É –∏–ª–∏ –Ω–µ—Ç.')

    task = Task.get((Task.id_manager == message.chat.id) &
                    (Task.status == 'process'))
    bot.send_message(task.id_worker,
                     '–ü—Ä–∏–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É?',
                     reply_markup=gen_buttons_finish_or_stop())


def gen_buttons_finish_or_stop():
    """–§—É–Ω–∫—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É"""

    logger.info('')
    yes = InlineKeyboardButton(
        text='‚úÖ',
        callback_data='accept',
    )

    keyboard = InlineKeyboardMarkup()
    keyboard.add(yes)
    return keyboard


@bot.message_handler(state=UserState.worker_end_task)
@error_handler
def handle_accept_question_to_worker(message: Message) -> None:
    """–°–ø—Ä–∞—à–∏–≤–∞–µ–º worker –ø—Ä–∏–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É –∏–ª–∏ –Ω–µ—Ç."""

    logger.info('–°–ø—Ä–∞—à–∏–≤–∞–µ–º worker –ø—Ä–∏–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É –∏–ª–∏ –Ω–µ—Ç')

    id_manager = Task.id_manager
    task = Task.get((id_manager == message.chat.id) &
                    (Task.status == 'process'))
    bot.send_message(task.id_worker,
                     '–ü—Ä–∏–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É?',
                     reply_markup=gen_buttons_finish_or_stop())


@bot.callback_query_handler(
    func=lambda callback: callback.data in ['task_list_manager'])
@error_handler_callback
def handler_task_list_to_manager(callback) -> None:
    """–£–∑–Ω–∞–µ–º, –∫–∞–∫–∏–µ —Ä–∞–±–æ—Ç—ã —Ö–æ—á–µ—Ç —É–≤–∏–¥–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""

    logger.info('–£–∑–Ω–∞–µ–º, –∫–∞–∫–∏–µ —Ä–∞–±–æ—Ç—ã —Ö–æ—á–µ—Ç —É–≤–∏–¥–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.')

    bot.send_message(callback.from_user.id,
                     '–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å?',
                     reply_markup=gen_buttons_tip_of_tasks()
                     )
    bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id
    )

def gen_buttons_tip_of_tasks():
    """
    –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥—è–ª –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏–π
    all - –í—Å–µ
    status - –†–∞–±–æ—Ç—ã –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ
    time - –†–∞–±–æ—Ç—ã –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫
    worker - –†–∞–±–æ—Ç—ã –æ–¥–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    """

    logger.info('–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥—è–ª –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏–π'
    'all - –í—Å–µ'
    'status - –†–∞–±–æ—Ç—ã –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ'
    'time - –†–∞–±–æ—Ç—ã –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫'
    'worker - –†–∞–±–æ—Ç—ã –æ–¥–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è')

    all_tasks = InlineKeyboardButton(
        text='–í—Å–µ –∑–∞–¥–∞–Ω–∏—è',
        callback_data='all',
    )
    status_task = InlineKeyboardButton(
        text='–í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ',
        callback_data='status',
    )
    menu = InlineKeyboardButton(
        text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',
        callback_data='menu',
    )

    keyboard = InlineKeyboardMarkup()
    keyboard.add(all_tasks)
    keyboard.add(status_task)
    keyboard.add(menu)

    return keyboard


@bot.callback_query_handler(state=UserState.chose_task_info_id_manager)
@error_handler_callback
def handler_task_list_to_manager_send(callback) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""

    logger.info('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏')

    task = Task.get(Task.task_id == callback.data)
    worker = UserWorker.get(task.id_worker == UserWorker.user_id)
    date_finish = task.date_finish
    status = task.status
    date_start = task.date_start

    if status == 'finishing':
        status = '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏ –≤–æ—Ç-–≤–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –∑–∞–¥–∞–Ω–∏–µ'
        date_finish = '–†–∞–±–æ—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
    elif status == 'process':
        status = '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –µ—â—ë –Ω–µ –ø—Ä–∏–Ω—è–ª —Ä–∞–±–æ—Ç—É'
        date_start = '–†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞'
        date_finish = '–†–∞–±–æ—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
    elif status == 'work':
        status = '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π'
        date_finish = '–†–∞–±–æ—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
    elif status == 'finish':
        status = '–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'

    bot.send_message(callback.from_user.id,
                     f'–ò–º—è —Ä–∞–±–æ—Ç—ã: \n{task.task_name}\n\n'
                     f'üßë‚Äçüíª–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: \n{worker.user_name}\n\n'
                     f'üìÜ–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã: \n{date_start}\n\n'
                     f'–°—Ç–∞—Ç—É—Å: \n{status}\n\n'
                     f'üìÜ–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã: \n{date_finish}')

    bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id
    )
    bot.set_state(callback.from_user.id, UserState.to_do_manager)
    handle_manager_to_do(callback.message)


@bot.message_handler(state=UserState.chose_times_borders_status)
@error_handler
def handler_task_list_to_manager_ask_status(message) -> None:
    """–£–∑–Ω–∞–µ–º, –∑–∞–¥–∞–Ω–∏—è –≤ –∫–∞–∫–æ–º —Å—Ç–∞—Ç—É—Å–µ –Ω—É–∂–Ω—ã"""

    logger.info('–£–∑–Ω–∞–µ–º, –∑–∞–¥–∞–Ω–∏—è –≤ –∫–∞–∫–æ–º —Å—Ç–∞—Ç—É—Å–µ –Ω—É–∂–Ω—ã')

    time_borders = message.text
    bot.send_message(message.chat.id,
                     '–í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫–æ–º —Å—Ç–∞—Ç—É—Å–µ',
                     reply_markup=gen_buttons_status_task(time_borders))
    bot.set_state(message.chat.id, UserState.send_task_status)


def gen_buttons_status_task(time_borders):
    """–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å"""

    logger.info(
        '–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å')

    work = InlineKeyboardButton(
        text='–í —Ä–∞–±–æ—Ç–µ (—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è)',
        callback_data=f'work, {time_borders}',
    )
    finish = InlineKeyboardButton(
        text='–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
        callback_data=f'finish, {time_borders}',
    )
    menu = InlineKeyboardButton(
        text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',
        callback_data='menu',
    )

    keyboard = InlineKeyboardMarkup()
    keyboard.add(work)
    keyboard.add(finish)
    keyboard.add(menu)
    return keyboard


@bot.callback_query_handler(state=UserState.send_task_status)
def handler_task_list_to_manager_time_status(callback) -> None:
    """–£–∑–Ω–∞–ª–∏ –æ—Ç—Ä–µ–∑–æ–∫ –≤—Ä–µ–º–µ–Ω–∏. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å"""

    logger.info('–£–∑–Ω–∞–ª–∏ –æ—Ç—Ä–µ–∑–æ–∫ –≤—Ä–µ–º–µ–Ω–∏. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å')

    tasks = []
    try:
        bot.edit_message_reply_markup(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id
        )
        status, borders = callback.data.split(', ')

        left_border, right_border = borders.split(' - ')

        left_date = datetime.datetime.strptime(left_border.strip(),
                                               '%d/%m/%Y')
        right_date = datetime.datetime.strptime(right_border.strip(),
                                                '%d/%m/%Y')

        for task in Task.select():
            if task.date_start == '':
                task_start_date = '12/12/1000'
            else:
                task_start_date = task.date_start
            task_start_date = datetime.datetime.strptime(task_start_date,
                                                         "%d/%m/%Y")
            if task.date_finish == '':
                task_finish_date = '12/12/9999'
            else:
                task_finish_date = task.date_finish
            task_finish_date = datetime.datetime.strptime(task_finish_date,
                                                          "%d/%m/%Y")
            if ((left_date <= task_start_date <= right_date or
                 left_date <= task_finish_date <= right_date)
                    and (task.status == status)):
                tasks.append(task)

        markup = InlineKeyboardMarkup()
        if tasks:
            bot.send_message(callback.from_user.id,
                             f'üìã –ó–∞–¥–∞—á–∏ –≤ –ø–µ—Ä–∏–æ–¥:\n'
                             f'{left_border} - {right_border}')
            for task_i in tasks:
                markup.add(InlineKeyboardButton(
                    text=f'"{task_i.task_name}"',
                    callback_data=task_i.task_id,
                ))
            markup.add(InlineKeyboardButton(
                text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',
                callback_data='menu',
            ))
            bot.send_message(callback.from_user.id,
                             '–í—ã–±–µ—Ä–∏—Ç–µ, –ø—Ä–æ –∫–∞–∫—É—é –ø—Ä–∏—Å–ª–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
                             reply_markup=markup)
            bot.set_state(callback.from_user.id,
                          UserState.chose_task_info_id_manager)
        else:
            bot.send_message(callback.from_user.id,
                             '‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.')
            bot.set_state(callback.from_user.id, UserState.to_do_manager)
            handle_manager_to_do(callback.message)

    except ValueError as e:
        print(f'ValueError: {e}')
        bot.send_message(callback.from_user.id,
                         '‚ùå–û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã')

        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(
            text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',
            callback_data='menu',
        ))
        bot.send_message(callback.from_user.id,
                         '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ',
                         reply_markup=markup)


@bot.callback_query_handler(
    func=lambda callback: callback.data in ['all', 'report', 'status'])
@error_handler_callback
def handler_task_list_to_manager_time_borders(callback) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∑–∞ –Ω—É–∂–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫ –≤—Ä–µ–º–µ–Ω–∏. –£–∑–Ω–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã"""

    logger.info('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∑–∞ –Ω—É–∂–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫ –≤—Ä–µ–º–µ–Ω–∏. –£–∑–Ω–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã')

    today = datetime.date.today().strftime("%d/%m/%Y")
    random_day = datetime.date.today() - datetime.timedelta(days=30)
    random_day = random_day.strftime("%d/%m/%Y")
    bot.send_message(callback.from_user.id,
                     '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ - –¥–∞—Ç–∞ –∫–æ–Ω—Ü–∞'
                     '\n–í —Ñ–æ—Ä–º–∞—Ç–µ: dd/mm/yyyy - dd/mm/yyyy\n\n'
                     f'–ü—Ä–∏–º–µ—Ä:\n{random_day} - {today}')
    bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id
    )
    if callback.data in ['all']:
        bot.set_state(callback.from_user.id, UserState.chose_times_borders)
    elif callback.data in ['report']:
        bot.set_state(callback.from_user.id,
                      UserState.chose_times_borders_report)
    elif callback.data in ['status']:
        bot.set_state(callback.from_user.id,
                      UserState.chose_times_borders_status)


@bot.message_handler(state=UserState.chose_times_borders)
def handler_task_list_to_manager_time_all(message: Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï –∑–∞–¥–∞—á–∏ –∑–∞ –Ω—É–∂–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫ –≤—Ä–µ–º–µ–Ω–∏"""

    logger.info('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï –∑–∞–¥–∞—á–∏ –∑–∞ –Ω—É–∂–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫ –≤—Ä–µ–º–µ–Ω–∏')

    tasks = []
    try:
        left_border, right_border = message.text.split(' - ')

        left_date = datetime.datetime.strptime(left_border.strip(),
                                               '%d/%m/%Y')
        right_date = datetime.datetime.strptime(right_border.strip(),
                                                '%d/%m/%Y')
        for task in Task.select():
            if task.date_start == '':
                task_start_date = '12/12/1000'
            else:
                task_start_date = task.date_start
            task_start_date = datetime.datetime.strptime(task_start_date,
                                                         "%d/%m/%Y")
            if task.date_finish == '':
                task_finish_date = '12/12/9999'
            else:
                task_finish_date = task.date_finish
            task_finish_date = datetime.datetime.strptime(task_finish_date,
                                                          "%d/%m/%Y")
            if (left_date <= task_start_date <= right_date or
                    left_date <= task_finish_date <= right_date):
                tasks.append(task)

        markup = InlineKeyboardMarkup()
        if tasks:
            bot.send_message(message.chat.id,
                             f'üìã –ó–∞–¥–∞—á–∏ –≤ –ø–µ—Ä–∏–æ–¥:\n'
                             f'{left_border} - {right_border}')
            for task_i in tasks:
                if task_i.status == 'work':
                    status = '–í —Ä–∞–±–æ—Ç–µ —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è'
                elif task_i.status == 'finish':
                    status = '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'
                elif task_i.status == 'process':
                    status = '–í—ã —Å–æ–∑–¥–∞—ë—Ç–µ —Ä–∞–±–æ—Ç—É'
                else:
                    status = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å'
                markup.add(InlineKeyboardButton(
                    text=f'"{task_i.task_name}". {status}',
                    callback_data=task_i.task_id,
                ))
            markup.add(InlineKeyboardButton(
                text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',
                callback_data='menu',
            ))
            bot.send_message(message.chat.id,
                             '–í—ã–±–µ—Ä–∏—Ç–µ, –ø—Ä–æ –∫–∞–∫—É—é –ø—Ä–∏—Å–ª–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
                             reply_markup=markup)
            bot.set_state(message.chat.id,
                          UserState.chose_task_info_id_manager)
        else:
            bot.send_message(message.chat.id,
                             '‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.')
            bot.set_state(message.chat.id, UserState.to_do_manager)
            handle_manager_to_do(message)

    except ValueError as e:
        print(f'ValueError: {e}')
        bot.send_message(message.chat.id,
                         '‚ùå–û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã')

        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(
            text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',
            callback_data='menu',
        ))
        markup.add(InlineKeyboardButton(
            text='–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
            callback_data='all',
        ))
        bot.send_message(message.chat.id,
                         '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ',
                         reply_markup=markup)


@bot.message_handler(state=UserState.chose_times_borders_report)
@error_handler
def handler_task_report(message: Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–¢–ß–ï–¢ –æ —Ä–∞–±–æ—Ç–∞—Ö"""

    logger.info('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–¢–ß–ï–¢ –æ —Ä–∞–±–æ—Ç–∞—Ö')

    tasks_started = []
    tasks_finished = []

    left_border, right_border = message.text.split(' - ')

    left_date = datetime.datetime.strptime(left_border.strip(),
                                           '%d/%m/%Y')
    right_date = datetime.datetime.strptime(right_border.strip(),
                                            '%d/%m/%Y')
    for task in Task.select():
        if task.date_start == '':
            task_start_date = '12/12/1000'
        else:
            task_start_date = task.date_start
        task_start_date = datetime.datetime.strptime(task_start_date,
                                                     "%d/%m/%Y")
        if task.date_finish == '':
            task_finish_date = '12/12/9999'
        else:
            task_finish_date = task.date_finish
        task_finish_date = datetime.datetime.strptime(task_finish_date,
                                                      "%d/%m/%Y")
        if left_date <= task_start_date <= right_date:
            tasks_started.append(task)
        if left_date <= task_finish_date <= right_date:
            tasks_finished.append(task)

    if tasks_started or tasks_finished:
        len_started = len(tasks_started)
        len_finished = len(tasks_finished)
        bot.send_message(message.chat.id,
                         f'üìã –ó–∞–¥–∞—á–∏ –≤ –ø–µ—Ä–∏–æ–¥:\n'
                         f'{left_border} - {right_border}')
        bot.send_message(message.chat.id,
                         f'üöÄ–ù–∞—á–∞—Ç—ã—Ö –∑–∞–¥–∞—á: {len_started}\n\n'
                         f'üèÅ–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {len_finished}')
        handle_manager_to_do(message)
    else:
        bot.send_message(message.chat.id,
                         '‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.')
        bot.set_state(message.chat.id, UserState.to_do_manager)
        handle_manager_to_do(message)


########################################################################


"""–ù–∞—á–∞–ª–∞—Å—å —Ü–µ–ø–æ—á–∫–∞ worker"""


###########################################################################


@bot.callback_query_handler(
    func=lambda callback: callback.data in ['menu_w'])
@error_handler_callback
def handler_back_to_worker_menu(callback) -> None:
    """–í–æ–∑—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é"""

    logger.info('–í–æ–∑—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é')

    bot.set_state(callback.from_user.id, UserState.to_do_manager)
    bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id
    )
    handle_worker_to_do(callback.message)


@bot.callback_query_handler(func=lambda callback: callback.data in ['worker'])
@error_handler_callback
def handle_role(callback) -> None:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å - worker. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è"""

    logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å - worker. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è')

    bot.send_message(callback.from_user.id,
                     '‚úçÔ∏è–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:')
    bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id
    )
    bot.set_state(callback.from_user.id, UserState.name_worker)


@bot.message_handler(state=UserState.name_worker)
@error_handler
def handle_data(message: Message) -> None:
    """–£–∑–Ω–∞–ª–∏ –∏–º—è. –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏"""

    logger.info('–£–∑–Ω–∞–ª–∏ –∏–º—è. –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏')

    user_id = message.from_user.id
    user_name = message.text

    user = UserWorker.get_or_none(UserWorker.user_id == user_id)
    if user is None:
        UserWorker.create(
            user_id=user_id,
            user_name=user_name,
            id_task=0
        )
        bot.send_message(
            message.chat.id,
            '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!',
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        bot.reply_to(
            message,
            f"–†–∞–¥ –≤–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å, {user.user_name}!",
            reply_markup=ReplyKeyboardRemove()
        )
    handle_worker_to_do(message)


@bot.callback_query_handler(func=lambda callback: callback.data in ['accept'])
@error_handler_callback
def handle_accept_task(callback) -> None:
    """–ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É. –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Task"""

    logger.info('–ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É. –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Task')

    task = Task.get((Task.id_worker == callback.from_user.id) &
                    (Task.status == 'process'))
    task.status = 'work'
    task.date_start = datetime.date.today().strftime("%d/%m/%Y")
    task.save()
    bot.send_message(callback.from_user.id,
                     '‚úÖ –ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞!',
                     )
    bot.send_message(callback.from_user.id,
                     '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ',
                     reply_markup=gen_buttons_worker_to_do()
                     )
    bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id
    )

@bot.message_handler(state=UserState.to_do_worker)
@error_handler
def handle_worker_to_do(message: Message) -> None:
    """worker –≤—ã–±–∏—Ä–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ"""

    logger.info('worker –≤—ã–±–∏—Ä–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ')

    bot.send_message(message.chat.id,
                     '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                     reply_markup=gen_buttons_worker_to_do())


def gen_buttons_worker_to_do():
    """–§—É–Ω–∫—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è worker"""

    logger.info('–§—É–Ω–∫—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è worker')

    task_info = InlineKeyboardButton(
        text='üìë –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á',
        callback_data='task_list_worker',
    )
    task_fin = InlineKeyboardButton(
        text='‚òëÔ∏è–°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É',
        callback_data='task_fin',
    )
    report = InlineKeyboardButton(
        text='üìä–°–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç',
        callback_data='report_w',
    )
    keyboard = InlineKeyboardMarkup()
    keyboard.add(task_info)
    keyboard.add(task_fin)
    keyboard.add(report)
    return keyboard


@bot.callback_query_handler(
    func=lambda callback: callback.data in ['task_fin'])
@error_handler_callback
def handle_fin_task_task_id(callback) -> None:
    """–£–∑–Ω–∞–µ–º id –¥–ª—è –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å"""

    logger.info('–£–∑–Ω–∞–µ–º id –¥–ª—è –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å')

    markup = InlineKeyboardMarkup()
    tasks = Task.select().where((Task.status == 'work') &
                                (Task.id_worker == callback.from_user.id))

    bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id
    )

    if not tasks.exists():
        bot.send_message(callback.from_user.id,
                         'üì≠–ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Çüì≠')
        bot.set_state(callback.from_user.id, UserState.to_do_worker)
        handle_worker_to_do(callback.message)
        return
    else:
        for task in tasks:
            markup.add(InlineKeyboardButton(
                text=task.task_name,
                callback_data=task.task_id,
            ),
            )

        bot.send_message(callback.from_user.id,
                         "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É:",
                         reply_markup=markup)
        bot.set_state(callback.from_user.id, UserState.chose_task_id)


@bot.callback_query_handler(state=UserState.chose_task_id)
@error_handler_callback
def handle_fin_task_chak(callback) -> None:
    """–°–¥–∞–µ–º —Ä–∞–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä—É"""

    logger.info('–°–¥–∞–µ–º —Ä–∞–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä—É')

    task_id = callback.data
    task = Task.get(Task.task_id == task_id)
    task.status = 'finishing'
    task.save()
    bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id
    )
    bot.send_message(callback.from_user.id, 'üìé–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ä–∞–±–æ—Ç—É: ')
    bot.set_state(callback.from_user.id, UserState.forward_to_manager)


@bot.message_handler(state=UserState.send_task)
@error_handler
def handle_send_task_to_manager(message: Message):
    """–°–æ–æ–±—â–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""

    logger.info('–°–æ–æ–±—â–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã')

    task = Task.get((Task.id_worker == message.chat.id) &
                    (Task.status == 'finishing'))

    worker = UserWorker.get(UserWorker.user_id == task.id_worker)
    bot.send_message(message.chat.id,
                     'üéä–û—Ç–ª–∏—á–Ω–æ, —Ä–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
    bot.send_message(task.id_manager,
                     f'üí°{worker.user_name} - —Å–¥–∞—ë—Ç —Ä–∞–±–æ—Ç—É'
                     f' "{task.task_name}!"')

    handle_end_circle(message)
    handle_worker_to_do(message)


def gen_buttons_yes_no():
    """–§—É–Ω–∫—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –¥–∞\–Ω–µ—Ç"""

    logger.info('–§—É–Ω–∫—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –¥–∞\–Ω–µ—Ç')

    yes = InlineKeyboardButton(
        text='‚úÖ',
        callback_data='finish_finish',
    )
    no = InlineKeyboardButton(
        text='‚ùå',
        callback_data='stop',
    )

    keyboard = InlineKeyboardMarkup()
    keyboard.add(yes)
    keyboard.add(no)
    return keyboard


@bot.message_handler(state=UserState.end_task)
@error_handler
def handle_end_circle(message: Message) -> None:
    """–°–ø—Ä–∞—à–∏–≤–∞–µ–º worker –ø—Ä–∏–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É –∏–ª–∏ –Ω–µ—Ç."""

    logger.info('–°–ø—Ä–∞—à–∏–≤–∞–µ–º worker –ø—Ä–∏–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É –∏–ª–∏ –Ω–µ—Ç.')

    task = Task.get((Task.id_worker == message.chat.id) &
                    (Task.status == 'finishing'))
    task.status = 'finish'
    task.date_finish = datetime.date.today().strftime("%d/%m/%Y")
    task.save()
    bot.send_message(task.id_manager,
                     f'–†–∞–±–æ—Ç–∞ "{task.task_name}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                     reply_markup=gen_buttons_end_circle())


def gen_buttons_end_circle():
    """–§—É–Ω–∫—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É"""

    logger.info('–§—É–Ω–∫—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É')

    end = InlineKeyboardButton(
        text='OK',
        callback_data='end_circle',
    )
    keyboard = InlineKeyboardMarkup()
    keyboard.add(end)
    return keyboard


@bot.callback_query_handler(
    func=lambda callback: callback.data in ['task_list_worker'])
@error_handler_callback
def handler_task_list_to_worker(callback) -> None:
    """ –£–∑–Ω–∞–µ–º, –∫–∞–∫–∏–µ —Ä–∞–±–æ—Ç—ã —Ö–æ—á–µ—Ç —É–≤–∏–¥–µ—Ç—å worker."""

    logger.info('–£–∑–Ω–∞–µ–º, –∫–∞–∫–∏–µ —Ä–∞–±–æ—Ç—ã —Ö–æ—á–µ—Ç —É–≤–∏–¥–µ—Ç—å worker.')

    bot.send_message(callback.from_user.id,
                     '–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å?',
                     reply_markup=gen_buttons_tip_of_tasks_w()
                     )
    bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id
    )


def gen_buttons_tip_of_tasks_w():
    """
    –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥—è–ª –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏–π
    all_w - –í—Å–µ
    status_w - –†–∞–±–æ—Ç—ã –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ
    need_manager - –†–∞–±–æ—Ç—ã –æ–¥–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    """

    logger.info('–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥—è–ª –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏–π'
    'all_w - –í—Å–µ'
    'status_w - –†–∞–±–æ—Ç—ã –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ'
    'need_manager - –†–∞–±–æ—Ç—ã –æ–¥–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞')

    all_tasks = InlineKeyboardButton(
        text='–í—Å–µ –∑–∞–¥–∞–Ω–∏—è',
        callback_data='all_w',
    )
    status_task = InlineKeyboardButton(
        text='–í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ',
        callback_data='status_w',
    )
    worker_tasks = InlineKeyboardButton(
        text='–û—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞',
        callback_data='need_manager',
    )
    menu = InlineKeyboardButton(
        text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',
        callback_data='menu_w',
    )

    keyboard = InlineKeyboardMarkup()
    keyboard.add(all_tasks)
    keyboard.add(status_task)
    keyboard.add(worker_tasks)
    keyboard.add(menu)

    return keyboard


@bot.callback_query_handler(state=UserState.chose_task_info_id_worker)
@error_handler_callback
def handler_task_list_to_worker_send(callback) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""

    logger.info('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏')

    task = Task.get(Task.task_id == callback.data)
    manager = UserManager.get(task.id_manager == UserManager.user_id)
    date_finish = task.date_finish
    status = task.status
    date_start = task.date_start

    if status == 'finishing':
        status = '–í—ã –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ'
        date_finish = '–†–∞–±–æ—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
    elif status == 'process':
        status = '–í—ã –µ—â—ë –Ω–µ –ø—Ä–∏–Ω—è–ª–∏ —Ä–∞–±–æ—Ç—É'
        date_start = '–†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞'
        date_finish = '–†–∞–±–æ—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
    elif status == 'work':
        status = '–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π'
        date_finish = '–†–∞–±–æ—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
    elif status == 'finish':
        status = '–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'

    bot.send_message(callback.from_user.id,
                     f'–ò–º—è —Ä–∞–±–æ—Ç—ã: \n{task.task_name}\n\n'
                     f'–†–∞–±–æ—Ç—É –Ω–∞–∑–Ω–∞—á–∏–ª: \n{manager.user_name}\n\n'
                     f'üìÜ–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã: \n{date_start}\n\n'
                     f'–°—Ç–∞—Ç—É—Å: \n{status}\n\n'
                     f'üìÜ–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã: \n{date_finish}')

    bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id
    )
    bot.set_state(callback.from_user.id, UserState.to_do_worker)
    handle_worker_to_do(callback.message)



@bot.message_handler(state=UserState.chose_times_borders_status_w)
@error_handler
def handler_task_list_to_worker_ask_status(message) -> None:
    """–£–∑–Ω–∞–µ–º, –∑–∞–¥–∞–Ω–∏—è –≤ –∫–∞–∫–æ–º —Å—Ç–∞—Ç—É—Å–µ –Ω—É–∂–Ω—ã"""

    logger.info('–£–∑–Ω–∞–µ–º, –∑–∞–¥–∞–Ω–∏—è –≤ –∫–∞–∫–æ–º —Å—Ç–∞—Ç—É—Å–µ –Ω—É–∂–Ω—ã')
    time_borders = message.text
    bot.send_message(message.chat.id,
                     '–í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫–æ–º —Å—Ç–∞—Ç—É—Å–µ',
                     reply_markup=gen_buttons_status_task_w(time_borders))
    bot.set_state(message.chat.id, UserState.send_task_status_w)


def gen_buttons_status_task_w(time_borders):
    """–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å"""

    logger.info(
        '–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å')

    work = InlineKeyboardButton(
        text='–í —Ä–∞–±–æ—Ç–µ (—É –≤–∞—Å)',
        callback_data=f'work, {time_borders}',
    )
    finish = InlineKeyboardButton(
        text='–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
        callback_data=f'finish, {time_borders}',
    )
    menu = InlineKeyboardButton(
        text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',
        callback_data='menu_w',
    )

    keyboard = InlineKeyboardMarkup()
    keyboard.add(work)
    keyboard.add(finish)
    keyboard.add(menu)
    return keyboard


@bot.callback_query_handler(state=UserState.send_task_status_w)
def handler_task_list_to_worker_time_status(callback) -> None:
    """–£–∑–Ω–∞–ª–∏ –æ—Ç—Ä–µ–∑–æ–∫ –≤—Ä–µ–º–µ–Ω–∏. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å"""

    logger.info('–£–∑–Ω–∞–ª–∏ –æ—Ç—Ä–µ–∑–æ–∫ –≤—Ä–µ–º–µ–Ω–∏. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å')

    tasks = []
    try:
        bot.edit_message_reply_markup(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id
        )
        status, borders = callback.data.split(', ')

        left_border, right_border = borders.split(' - ')

        left_date = datetime.datetime.strptime(left_border.strip(),
                                               '%d/%m/%Y')
        right_date = datetime.datetime.strptime(right_border.strip(),
                                                '%d/%m/%Y')
        for task in Task.select():
            if task.date_start == '':
                task_start_date = '12/12/1000'
            else:
                task_start_date = task.date_start
            task_start_date = datetime.datetime.strptime(task_start_date,
                                                         "%d/%m/%Y")
            if task.date_finish == '':
                task_finish_date = '12/12/9999'
            else:
                task_finish_date = task.date_finish
            task_finish_date = datetime.datetime.strptime(task_finish_date,
                                                          "%d/%m/%Y")
            if ((left_date <= task_start_date <= right_date or
                 left_date <= task_finish_date <= right_date)
                    and (task.status == status)):
                tasks.append(task)

        markup = InlineKeyboardMarkup()
        if tasks:
            bot.send_message(callback.from_user.id,
                             f'üìã –ó–∞–¥–∞—á–∏ –≤ –ø–µ—Ä–∏–æ–¥:\n'
                             f'{left_border} - {right_border}')
            for task_i in tasks:
                markup.add(InlineKeyboardButton(
                    text=f'"{task_i.task_name}"',
                    callback_data=task_i.task_id,
                ))
            markup.add(InlineKeyboardButton(
                text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',
                callback_data='menu_w',
            ))
            bot.send_message(callback.from_user.id,
                             '–í—ã–±–µ—Ä–∏—Ç–µ, –ø—Ä–æ –∫–∞–∫—É—é –ø—Ä–∏—Å–ª–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
                             reply_markup=markup)
            bot.set_state(callback.from_user.id,
                          UserState.chose_task_info_id_worker)
        else:
            bot.send_message(callback.from_user.id,
                             '‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.')
            bot.set_state(callback.from_user.id, UserState.to_do_worker)
            handle_worker_to_do(callback.message)

    except ValueError as e:
        print(f'ValueError: {e}')
        bot.send_message(callback.from_user.id,
                         '‚ùå–û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã')

        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(
            text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',
            callback_data='menu_w',
        ))
        bot.send_message(callback.from_user.id,
                         '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ',
                         reply_markup=markup)


@bot.callback_query_handler(
    func=lambda callback: callback.data in ['all_w', 'report_w', 'status_w'])
@error_handler_callback
def handler_task_list_to_manager_time_borders(callback) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∑–∞ –Ω—É–∂–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫ –≤—Ä–µ–º–µ–Ω–∏. –£–∑–Ω–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã"""

    logger.info('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∑–∞ –Ω—É–∂–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫ –≤—Ä–µ–º–µ–Ω–∏. –£–∑–Ω–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã')


    today = datetime.date.today().strftime("%d/%m/%Y")
    random_day = datetime.date.today() - datetime.timedelta(days=30)
    random_day = random_day.strftime("%d/%m/%Y")
    bot.send_message(callback.from_user.id,
                     '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ - –¥–∞—Ç–∞ –∫–æ–Ω—Ü–∞'
                     '\n–í —Ñ–æ—Ä–º–∞—Ç–µ: dd/mm/yyyy - dd/mm/yyyy\n\n'
                     f'–ü—Ä–∏–º–µ—Ä:\n{random_day} - {today}')
    bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id
    )
    if callback.data in ['all_w']:
        bot.set_state(callback.from_user.id,
                      UserState.chose_times_borders_w)
    elif callback.data in ['report_w']:
        bot.set_state(callback.from_user.id,
                      UserState.chose_times_borders_report_w)
    elif callback.data in ['status_w']:
        bot.set_state(callback.from_user.id,
                      UserState.chose_times_borders_status_w)



@bot.message_handler(state=UserState.chose_times_borders_w)
@error_handler
def handler_task_list_to_manager_time_all(message: Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï –∑–∞–¥–∞—á–∏ –∑–∞ –Ω—É–∂–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫ –≤—Ä–µ–º–µ–Ω–∏"""

    logger.info('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï –∑–∞–¥–∞—á–∏ –∑–∞ –Ω—É–∂–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫ –≤—Ä–µ–º–µ–Ω–∏')

    tasks = []

    left_border, right_border = message.text.split(' - ')

    left_date = datetime.datetime.strptime(left_border.strip(),
                                           '%d/%m/%Y')
    right_date = datetime.datetime.strptime(right_border.strip(),
                                            '%d/%m/%Y')
    for task in Task.select():
        if task.date_start == '':
            task_start_date = '12/12/1000'
        else:
            task_start_date = task.date_start
        task_start_date = datetime.datetime.strptime(task_start_date,
                                                     "%d/%m/%Y")
        if task.date_finish == '':
            task_finish_date = '12/12/9999'
        else:
            task_finish_date = task.date_finish
        task_finish_date = datetime.datetime.strptime(task_finish_date,
                                                      "%d/%m/%Y")
        if (left_date <= task_start_date <= right_date or
                left_date <= task_finish_date <= right_date):
            tasks.append(task)

    markup = InlineKeyboardMarkup()
    if tasks:
        bot.send_message(message.chat.id,
                         f'üìã –ó–∞–¥–∞—á–∏ –≤ –ø–µ—Ä–∏–æ–¥:\n'
                         f'{left_border} - {right_border}')
        for task_i in tasks:
            if task_i.status == 'work':
                status = '–í —Ä–∞–±–æ—Ç–µ(—É –≤–∞—Å)'
            elif task_i.status == 'finish':
                status = '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'
            elif task_i.status == 'process':
                status = '–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞—ë—Ç —Ä–∞–±–æ—Ç—É'
            else:
                status = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å'
            markup.add(InlineKeyboardButton(
                text=f'"{task_i.task_name}". {status}',
                callback_data=task_i.task_id,
            ))
        markup.add(InlineKeyboardButton(
            text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',
            callback_data='menu_w',
        ))
        bot.send_message(message.chat.id,
                         '–í—ã–±–µ—Ä–∏—Ç–µ, –ø—Ä–æ –∫–∞–∫—É—é –ø—Ä–∏—Å–ª–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
                         reply_markup=markup)
        bot.set_state(message.chat.id,
                      UserState.chose_task_info_id_worker)
    else:
        bot.send_message(message.chat.id,
                         '‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.')
        bot.set_state(message.chat.id, UserState.to_do_manager)
        handle_worker_to_do(message)



@bot.message_handler(state=UserState.chose_times_borders_report_w)
@error_handler
def handler_task_report_to_worker(message: Message) -> None:
    """–°–æ–∑–¥–∞—ë–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–¢–ß–ï–¢ –æ —Ä–∞–±–æ—Ç–∞—Ö –≤–æ—Ä–∫–µ—Ä—É"""

    logger.info('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–¢–ß–ï–¢ –æ —Ä–∞–±–æ—Ç–∞—Ö')

    tasks_started = []
    tasks_finished = []

    left_border, right_border = message.text.split(' - ')

    left_date = datetime.datetime.strptime(left_border.strip(),
                                           '%d/%m/%Y')
    right_date = datetime.datetime.strptime(right_border.strip(),
                                            '%d/%m/%Y')

    for task in Task.select():
        if task.date_start == '':
            task_start_date = '12/12/1000'
        else:
            task_start_date = task.date_start
        task_start_date = datetime.datetime.strptime(task_start_date,
                                                     "%d/%m/%Y")
        if task.date_finish == '':
            task_finish_date = '12/12/9999'
        else:
            task_finish_date = task.date_finish
        task_finish_date = datetime.datetime.strptime(task_finish_date,
                                                      "%d/%m/%Y")
        if left_date <= task_start_date <= right_date:
            tasks_started.append(task)
        if left_date <= task_finish_date <= right_date:
            tasks_finished.append(task)

    if tasks_started or tasks_finished:
        len_started = len(tasks_started)
        len_finished = len(tasks_finished)
        bot.send_message(message.chat.id,
                         f'üìã –ó–∞–¥–∞—á–∏ –≤ –ø–µ—Ä–∏–æ–¥:\n'
                         f'{left_border} - {right_border}')
        bot.send_message(message.chat.id,
                         f'üöÄ–ù–∞—á–∞—Ç—ã—Ö –∑–∞–¥–∞—á: {len_started}\n\n'
                         f'üèÅ–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {len_finished}')
        handle_worker_to_do(message)
    else:
        bot.send_message(message.chat.id,
                         '‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.')
        bot.set_state(message.chat.id, UserState.to_do_manager)
        handle_worker_to_do(message)


@bot.callback_query_handler(
    func=lambda callback: callback.data in ['need_manager'])
@error_handler_callback
def handler_task_list_to_worker_choose_need_worker(callback) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º workers, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ"""

    logger.info('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º workers, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ')


    markup = InlineKeyboardMarkup()
    managers = UserManager.select()
    for manager in managers:
        markup.add(InlineKeyboardButton(
            text=manager.user_name,
            callback_data=manager.user_id,
        ),
        )

    markup.add(InlineKeyboardButton(
        text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',
        callback_data='menu_w',
    ))
    bot.send_message(callback.from_user.id,
                     "üßë‚Äçüíª–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç –∫–æ–≥–æ –ø—Ä–∏—à–ª–∞ —Ä–∞–±–æ—Ç–∞:",
                     reply_markup=markup)
    bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id
    )
    bot.set_state(callback.from_user.id, UserState.chose_task_manager)


@bot.callback_query_handler(state=UserState.chose_task_manager)
@error_handler_callback
def handler_task_list_to_worker_need_worker(callback) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –ø–æ —Å—Ç–∞—Ç—É—Å—É –∑–∞–¥–∞–Ω–∏–π"""

    logger.info('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –ø–æ —Å—Ç–∞—Ç—É—Å—É –∑–∞–¥–∞–Ω–∏–π')


    tasks = Task.select().where((Task.id_worker == callback.from_user.id) &
                                (Task.id_manager == callback.data))
    markup = InlineKeyboardMarkup()
    for task in tasks:
        if task.status == 'work':
            status = '–í —Ä–∞–±–æ—Ç–µ(—É –≤–∞—Å)'
        elif task.status == 'finish':
            status = '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'
        elif task.status == 'process':
            status = '–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞—ë—Ç —Ä–∞–±–æ—Ç—É'
        else:
            status = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å'

        markup.add(InlineKeyboardButton(
            text=f'"{task.task_name}". {status}',
            callback_data=task.task_id,
        ),
        )
    markup.add(InlineKeyboardButton(
        text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',
        callback_data='menu_w',
    ))
    bot.send_message(callback.from_user.id,
                     '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n'
                     '–í—ã–±–µ—Ä–∏—Ç–µ, –ø—Ä–æ –∫–∞–∫—É—é –ø—Ä–∏—Å–ª–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
                     reply_markup=markup)
    bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id
    )
    bot.set_state(callback.from_user.id,
                  UserState.chose_task_info_id_worker)


@bot.message_handler(state=UserState.forward_to_manager,
                     content_types=['photo', 'document', 'text'])
@error_handler
def forward_message_task_to_manager(message: Message) -> None:
    """–ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É"""
    logger.info('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É, –ª–∏–±–æ –ø–æ–ª—É—á–∞–µ–º –µ—â—ë —Ñ–∞–π–ª')

    manager = UserManager.get()
    manager_id = manager.user_id
    if message.content_type == 'document':
        bot.send_document(manager_id, message.document.file_id)
    elif message.content_type == 'photo':
        bot.send_photo(manager_id, message.photo[0].file_id)
    elif message.content_type == 'text':
        bot.send_message(manager_id, message.text)
    else:
        bot.send_message(manager_id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è')
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(
        text='–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ñ–∞–π–ª/–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
        callback_data='send_more_w',
    ))
    markup.add(InlineKeyboardButton(
        text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –º–µ–Ω–µ–¥–∂–µ—Ä—É',
        callback_data='send_w',
    ))
    bot.send_message(message.chat.id,
                     '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ',
                     reply_markup=markup)
    return


@bot.callback_query_handler(
    func=lambda callback: callback.data in ['send_w', 'send_more_w'])
@error_handler_callback
def handler_send_or_send_more_to_manager(callback) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É, –ª–∏–±–æ –ø–æ–ª—É—á–∞–µ–º –µ—â—ë —Ñ–∞–π–ª"""

    logger.info('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É, –ª–∏–±–æ –ø–æ–ª—É—á–∞–µ–º –µ—â—ë —Ñ–∞–π–ª')

    if callback.data == 'send_w':
        bot.set_state(callback.from_user.id, UserState.send_task)
        handle_send_task_to_manager(callback.message)
    else:
        bot.send_message(callback.from_user.id,
                         "üìã–î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª/–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ –∑–∞–¥–∞—á–µ:", )
        bot.set_state(callback.from_user.id, UserState.forward_to_manager)


@bot.message_handler(func=lambda message: True)
def handle_unexpected_messages(message: Message):
    """–õ–æ–≤–∏–º –≤—Å–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""

    logger.info('–õ–æ–≤–∏–º –≤—Å–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è')

    bot.reply_to(
        message,
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. "
        "–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞.\n"
        "–í–≤–µ–¥–∏—Ç–µ /start"
    )
